//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpointLiteVersion.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class spointEntities : DbContext
    {
        public spointEntities()
            : base("name=spointEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ciudad> ciudad { get; set; }
        public virtual DbSet<clientes> clientes { get; set; }
        public virtual DbSet<compras> compras { get; set; }
        public virtual DbSet<Inventario> Inventario { get; set; }
        public virtual DbSet<itbis> itbis { get; set; }
        public virtual DbSet<productos> productos { get; set; }
        public virtual DbSet<suplidores> suplidores { get; set; }
        public virtual DbSet<tiposproductos> tiposproductos { get; set; }
        public virtual DbSet<TipoSuplidor> TipoSuplidor { get; set; }
        public virtual DbSet<vendedores> vendedores { get; set; }
        public virtual DbSet<DetalleCompra> DetalleCompra { get; set; }
        public virtual DbSet<DetalleCotizacion> DetalleCotizacion { get; set; }
        public virtual DbSet<DetallePrefactura> DetallePrefactura { get; set; }
        public virtual DbSet<DetalleVenta> DetalleVenta { get; set; }
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<Login> Login { get; set; }
        public virtual DbSet<cotizacion> cotizacion { get; set; }
        public virtual DbSet<prefactura> prefactura { get; set; }
        public virtual DbSet<DetalleNcf> DetalleNcf { get; set; }
        public virtual DbSet<NCF> NCF { get; set; }
        public virtual DbSet<NcFsecuencia> NcFsecuencia { get; set; }
        public virtual DbSet<NcfTipo> NcfTipo { get; set; }
        public virtual DbSet<facturas> facturas { get; set; }
    
        public virtual ObjectResult<sp_reporte_cotizacion_back_Result> sp_reporte_cotizacion_back(Nullable<decimal> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_reporte_cotizacion_back_Result>("sp_reporte_cotizacion_back", idVentaParameter);
        }
    
        public virtual ObjectResult<sp_reporte_venta_back_Result> sp_reporte_venta_back(Nullable<decimal> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_reporte_venta_back_Result>("sp_reporte_venta_back", idVentaParameter);
        }
    
        public virtual int prefacturacalc(Nullable<decimal> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("prefacturacalc", idVentaParameter);
        }
    
        public virtual ObjectResult<sp_reporte_prefactura_back_Result> sp_reporte_prefactura_back(Nullable<decimal> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_reporte_prefactura_back_Result>("sp_reporte_prefactura_back", idVentaParameter);
        }
    
        public virtual int NCFCALCULO(Nullable<decimal> numeroSecuencia, Nullable<decimal> idVenta, string prefijo)
        {
            var numeroSecuenciaParameter = numeroSecuencia.HasValue ?
                new ObjectParameter("NumeroSecuencia", numeroSecuencia) :
                new ObjectParameter("NumeroSecuencia", typeof(decimal));
    
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(decimal));
    
            var prefijoParameter = prefijo != null ?
                new ObjectParameter("prefijo", prefijo) :
                new ObjectParameter("prefijo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NCFCALCULO", numeroSecuenciaParameter, idVentaParameter, prefijoParameter);
        }
    }
}
